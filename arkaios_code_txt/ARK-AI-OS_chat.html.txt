ORIGINAL FILE: ARK-AI-OS/chat.html
--- BEGIN CONTENT ---
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat con Generación de Imágenes</title>
  <style>
    /* Estilos básicos para la interfaz de chat */
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      background-color: #f5f5f5;
    }
    .chat-container {
      background: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
      height: 70vh;
      display: flex;
      flex-direction: column;
    }
    .chat-messages {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
    }
    .message {
      margin-bottom: 15px;
      padding: 10px 15px;
      border-radius: 18px;
      max-width: 80%;
    }
    .user-message {
      background: #007bff;
      color: white;
      margin-left: auto;
    }
    .bot-message {
      background: #e9e9e9;
      color: #333;
    }
    .image-message {
      text-align: center;
    }
    .image-message img {
      max-width: 100%;
      border-radius: 10px;
      margin-top: 10px;
    }
    .chat-input {
      display: flex;
      padding: 15px;
      border-top: 1px solid #ddd;
    }
    .chat-input input {
      flex: 1;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 20px;
      margin-right: 10px;
    }
    .chat-input button {
      background: #007bff;
      color: white;
      border: none;
      border-radius: 20px;
      padding: 12px 20px;
      cursor: pointer;
    }
    .download-btn {
      display: inline-block;
      margin-top: 10px;
      padding: 5px 10px;
      background: #28a745;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  <div class="chat-container">
    <div class="chat-messages" id="chatMessages">
      <div class="message bot-message">
        ¡Hola! Escribe un prompt para generar una imagen.
      </div>
    </div>
    <div class="chat-input">
      <input type="text" id="userInput" placeholder="Escribe tu prompt aquí...">
      <button onclick="sendMessage()">Enviar</button>
    </div>
  </div>

  <script>
    // Almacenamiento de conversaciones
    let conversationHistory = [];
    
    // Función para enviar mensajes
    function sendMessage() {
      const userInput = document.getElementById('userInput');
      const prompt = userInput.value.trim();
      
      if (!prompt) return;
      
      // Mostrar mensaje del usuario
      addMessage(prompt, 'user');
      
      // Procesar el prompt (aquí iría la integración con Kalon.ai)
      processImageRequest(prompt);
      
      // Limpiar input
      userInput.value = '';
    }
    
    // Función para añadir mensajes al chat
    function addMessage(text, sender, imageUrl = null) {
      const chatMessages = document.getElementById('chatMessages');
      const messageDiv = document.createElement('div');
      
      if (sender === 'user') {
        messageDiv.className = 'message user-message';
        messageDiv.textContent = text;
        conversationHistory.push({ sender: 'user', text: text });
      } else if (imageUrl) {
        messageDiv.className = 'message bot-message image-message';
        messageDiv.innerHTML = `
          <div>${text}</div>
          <img src="${imageUrl}" alt="Imagen generada">
          <a href="${imageUrl}" download="imagen-generada.png" class="download-btn">Descargar imagen</a>
        `;
        conversationHistory.push({ sender: 'bot', text: text, imageUrl: imageUrl });
      } else {
        messageDiv.className = 'message bot-message';
        messageDiv.textContent = text;
        conversationHistory.push({ sender: 'bot', text: text });
      }
      
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }
    
    // Función para procesar la solicitud de imagen
    async function processImageRequest(prompt) {
      addMessage("Generando imagen...", 'bot');
      
      try {
        // NOTA: Esta es la parte complicada que requeriría investigar
        // cómo funciona Kalon.ai y posiblemente usar un backend propio
        // como intermediario para evitar problemas de CORS y seguridad
        
        // Ejemplo de implementación conceptual (no funcional directamente):
        // const imageUrl = await generateWithKalon(prompt);
        
        // Simulación de respuesta (reemplazar con integración real)
        setTimeout(() => {
          // En una implementación real, esto sería la URL de la imagen generada
          const mockImageUrl = 'https://via.placeholder.com/512x512/007bff/ffffff?text=Imagen+Generada';
          addMessage("¡Aquí está tu imagen!", 'bot', mockImageUrl);
        }, 2000);
        
      } catch (error) {
        console.error("Error generando imagen:", error);
        addMessage("Lo siento, hubo un error al generar la imagen. Por favor, intenta nuevamente.", 'bot');
      }
    }
    
    // Permitir enviar con Enter
    document.getElementById('userInput').addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        sendMessage();
      }
    });
  </script>
</body>
</html>
--- END CONTENT ---
