ORIGINAL FILE: ARK-AI-OS/arkaios-img-hotfix.js
--- BEGIN CONTENT ---

/**
 * arkaios-img-hotfix.js
 * Convierte respuestas de la IA del tipo { image_url } / { url } / { data } en imágenes renderizables
 * y genera miniaturas clicables. También intercepta addMsg(...) para normalizar respuestas de la IA.
 */
(function () {
  function isPlainObject(v){ return Object.prototype.toString.call(v) === '[object Object]'; }
  function isProbablyDataURL(s){ return typeof s === 'string' && s.startsWith('data:'); }
  function escapeHTML(s){ return String(s).replace(/[&<>"']/g, m => ({'&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'}[m])); }
  function buildImageHTML(src, alt) {
    var safe = escapeHTML(src), title = escapeHTML(alt || 'imagen');
    return '<div style="display:flex;flex-direction:column;gap:8px">'+
           '<a href="'+safe+'" target="_blank" rel="noopener" style="display:inline-block;max-width:100%">'+
           '<img src="'+safe+'" alt="'+title+'" style="max-width:100%;height:auto;border:1px solid #e5e7eb;border-radius:12px" />'+
           '</a><small style="color:#64748b">Pulsa para abrir en pestaña nueva</small></div>';
  }
  function normalizeAIResponse(resp) {
    try {
      if (resp && resp.tagName === 'IMG') return buildImageHTML(resp.src, resp.alt||'imagen');
      if (typeof resp === 'string') return resp;

      if (isPlainObject(resp) && resp.message && resp.message.content) {
        var c = resp.message.content;
        if (Array.isArray(c) && c.length) {
          var first = c[0];
          if (isPlainObject(first) && ('text' in first)) return String(first.text);
          if (isPlainObject(first) && first.image_url) return buildImageHTML(first.image_url, 'imagen');
          if (typeof first === 'string') return first;
        } else if (typeof c === 'string') return c;
      }

      if (isPlainObject(resp)) {
        if (resp.image_url) return buildImageHTML(resp.image_url, 'imagen');
        if (resp.url && (isProbablyDataURL(resp.url) || /^https?:\/\//.test(resp.url))) return buildImageHTML(resp.url, 'imagen');
        if (resp.data && isProbablyDataURL(resp.data)) return buildImageHTML(resp.data, 'imagen');
        if (typeof resp.text === 'string') return resp.text;
        if (typeof resp.content === 'string') return resp.content;
      }

      if (isPlainObject(resp) || Array.isArray(resp)) {
        return '<pre style="white-space:pre-wrap;word-break:break-word;background:#f8fafc;border:1px solid #e2e8f0;padding:10px;border-radius:10px;color:#0f172a">'+
               escapeHTML(JSON.stringify(resp, null, 2)) + '</pre>';
      }
      return escapeHTML(String(resp));
    } catch (e) {
      return '⚠️ Error normalizando respuesta: '+escapeHTML(String(e));
    }
  }
  window.arkHotfix = { normalizeAIResponse: normalizeAIResponse };

  if (typeof window.addMsg === 'function') {
    const original = window.addMsg;
    window.addMsg = function(payload, who){
      if (!who || who === 'ai') {
        try { payload = normalizeAIResponse(payload); } catch(e){}
        return original.call(this, payload, who||'ai');
      }
      return original.call(this, payload, who);
    };
  }
})();
--- END CONTENT ---
