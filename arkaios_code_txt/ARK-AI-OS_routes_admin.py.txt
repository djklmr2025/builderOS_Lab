ORIGINAL FILE: ARK-AI-OS/routes_admin.py
--- BEGIN CONTENT ---
# routes_admin.py
from flask import Blueprint, request, jsonify
from db import get_conn, row_to_dict, now_ts
import secrets, sqlite3

admin_bp = Blueprint("admin", __name__, url_prefix="/admin")

# Simple auth por header (opcional): Authorization: Bearer <TOKEN>
def require_admin(req):
    token = req.headers.get("Authorization","")
    want  = ("," + (req.app.config.get("ADMIN_TOKEN") or ""))  # o usa una env var
    return token.startswith("Bearer ") and token.split(" ",1)[1] and (want.strip(",") != "")

@admin_bp.get("/codes")
def list_codes():
    page = max(int(request.args.get("page",1)),1)
    size = min(max(int(request.args.get("size",20)),1),100)
    offset = (page-1)*size
    conn = get_conn(); cur = conn.cursor()
    cur.execute("SELECT * FROM codes ORDER BY created_at DESC LIMIT ? OFFSET ?", (size, offset))
    rows = [row_to_dict(r) for r in cur.fetchall()]
    cur.execute("SELECT COUNT(*) AS n FROM codes")
    total = cur.fetchone()[0]
    conn.close()
    return jsonify({"page":page,"size":size,"total":total,"items":rows})

@admin_bp.post("/codes/issue")
def issue_code():
    if not require_admin(request):
        return jsonify({"error":"unauthorized"}), 401
    body = request.json or {}
    amount = int(body.get("amount", 0))
    if amount <= 0: return jsonify({"error":"amount_invalid"}), 400
    code = body.get("code") or f"ARK{secrets.token_urlsafe(8).upper()}"
    expires = body.get("expires")  # opcional ISO8601
    conn = get_conn(); cur = conn.cursor()
    try:
        cur.execute("INSERT INTO codes(code,amount,expires,used,created_at) VALUES(?,?,?,?,?)",
                    (code, amount, expires, 0, now_ts()))
        conn.commit()
    except sqlite3.IntegrityError:
        conn.close()
        return jsonify({"error":"code_exists"}), 400
    conn.close()
    return jsonify({"ok":True,"code":code,"amount":amount,"expires":expires})

@admin_bp.post("/codes/invalidate")
def invalidate_code():
    if not require_admin(request):
        return jsonify({"error":"unauthorized"}), 401
    code = (request.json or {}).get("code","").upper()
    if not code: return jsonify({"error":"code_required"}), 400
    conn = get_conn(); cur = conn.cursor()
    cur.execute("UPDATE codes SET used=1, used_at=? WHERE code=? AND used=0", (now_ts(), code))
    conn.commit()
    n = cur.rowcount
    conn.close()
    return jsonify({"ok": True, "updated": n})

@admin_bp.get("/accounts")
def list_accounts():
    page = max(int(request.args.get("page",1)),1)
    size = min(max(int(request.args.get("size",20)),1),100)
    offset = (page-1)*size
    conn = get_conn(); cur = conn.cursor()
    cur.execute("SELECT account_id, updated_at FROM accounts ORDER BY updated_at DESC LIMIT ? OFFSET ?", (size, offset))
    rows = [row_to_dict(r) for r in cur.fetchall()]
    cur.execute("SELECT COUNT(*) as n FROM accounts")
    total = cur.fetchone()[0]
    conn.close()
    return jsonify({"page":page,"size":size,"total":total,"items":rows})

--- END CONTENT ---
