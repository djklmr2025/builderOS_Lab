ORIGINAL FILE: ARK-AI-OS/uploads/1756018124_index.html
--- BEGIN CONTENT ---
<!doctype html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <title>Arkaios UI ‚Äî Gemini</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="icon" href="https://img.icons8.com/fluency/48/robot-2.png" />
  <style>
    :root{
      --bg:#091017; --surface:#0d1a28; --ink:#e6f1ff; --muted:#9fb4d3;
      --brand:#00e1a3; --accent:#4ea2ff; --danger:#ff5b8a; --line:#14314f;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto; background:var(--bg); color:var(--ink)}
    .wrap{max-width:1100px;margin:0 auto;padding:16px;display:flex;flex-direction:column;height:100%}
    header{display:flex;align-items:center;gap:12px;margin-bottom:12px}
    header h1{font-size:20px;margin:0}
    .badge{font-size:12px;padding:4px 8px;border-radius:999px;background:#0e253e;border:1px solid var(--line);color:#bfe2ff}
    .status{font-size:11px;padding:2px 6px;border-radius:12px;margin-left:8px}
    .status.online{background:#004225;color:#00e1a3;border:1px solid #006b3d}
    .status.offline{background:#3d1a1a;color:#ff5b8a;border:1px solid #5c2929}
    .status.connecting{background:#3d3d1a;color:#e1e100;border:1px solid #5c5c29}
    #history{flex:1;overflow:auto;border:1px solid var(--line);border-radius:12px;padding:14px;background:rgba(255,255,255,.03)}
    .msg{padding:12px;border-radius:12px;margin-bottom:12px}
    .msg.user{background:rgba(0,225,163,.14);border:1px solid rgba(0,225,163,.35);margin-left:15%}
    .msg.ai{background:rgba(78,162,255,.12);border:1px solid rgba(78,162,255,.35);margin-right:15%}
    .msg.root{background:rgba(255,91,138,.12);border:1px solid rgba(255,91,138,.35)}
    .msg.system{background:rgba(255,193,7,.1);border:1px solid rgba(255,193,7,.3);text-align:center}
    .head{font-size:12px;color:var(--muted);margin-bottom:6px}
    .content{white-space:pre-wrap;line-height:1.6}
    .attachments{margin-top:8px;border-top:1px dashed var(--line);padding-top:8px;display:flex;flex-wrap:wrap;gap:8px}
    .thumb{display:inline-flex;align-items:center;gap:8px;border:1px solid var(--line);padding:6px;border-radius:8px;background:var(--surface)}
    .thumb img{max-width:160px;max-height:110px;border-radius:6px;display:block}
    .panel{margin-top:12px;border:1px solid var(--line);background:var(--surface);border-radius:12px;padding:12px}
    textarea{width:100%;min-height:90px;resize:none;background:rgba(255,255,255,.04);border:1px solid var(--line);border-radius:10px;padding:12px;color:var(--ink)}
    textarea:focus{outline:none;border-color:var(--brand)}
    .row{display:flex;gap:8px;align-items:center;justify-content:space-between;margin-top:8px}
    .btn{cursor:pointer;border-radius:10px;padding:10px 14px;border:1px solid var(--line);background:transparent;color:var(--ink);font-size:13px;transition:all 0.2s}
    .btn:hover{border-color:var(--brand);background:rgba(0,225,163,.1)}
    .btn:disabled{opacity:0.5;cursor:not-allowed}
    .btn.primary{background:var(--brand);color:#001b12;border:none;font-weight:600}
    .btn.primary:hover{background:#00c491}
    .btn.primary:disabled{background:#006b51;color:#4a9d7a}
    .btn.warning{border-color:#ff9db8;color:#ffd0dd}
    .btn.warning:hover{background:rgba(255,91,138,.1)}
    .filebar{display:flex;gap:10px;align-items:center;margin-top:8px;flex-wrap:wrap}
    .previews{display:flex;gap:10px;flex-wrap:wrap;margin-top:8px}
    .drop{border:2px dashed var(--line);border-radius:10px;padding:12px;color:var(--muted);text-align:center;transition:border-color 0.2s}
    .drop.dragover{border-color:var(--brand);background:rgba(0,225,163,.05)}
    .right{margin-left:auto}
    .switch{display:inline-flex;align-items:center;gap:8px;background:#15283f;border:1px solid var(--line);padding:6px 10px;border-radius:999px}
    .switch input{accent-color:var(--danger)}
    .hint{font-size:12px;color:var(--muted)}
    .loading{opacity:0.6}
    .error{color:var(--danger)}
    .success{color:var(--brand)}
    
    /* Animaciones */
    .msg{opacity:0;animation:fadeIn 0.3s forwards}
    @keyframes fadeIn{from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}
    
    /* Responsivo */
    @media (max-width: 768px) {
      .wrap{padding:8px}
      .msg.user{margin-left:5%}
      .msg.ai{margin-right:5%}
      .filebar{flex-direction:column;align-items:stretch}
    }
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <h1>ARKAIOS UI</h1>
      <span class="badge">Proveedor: Gemini</span>
      <span class="status connecting" id="connectionStatus">Conectando...</span>
      <span class="right switch" title="Permite √≥rdenes administrativas (se enviar√° un flag al servidor)">
        <input type="checkbox" id="rootToggle"/>
        <label for="rootToggle">Modo ROOT</label>
      </span>
    </header>

    <main id="history"></main>

    <section class="panel">
      <div class="filebar">
        <input type="file" id="fileInput" multiple accept="image/*,application/pdf,.pdf,.txt,.md,.json" />
        <button class="btn" id="clearBtn" title="Quitar adjuntos">Limpiar adjuntos</button>
        <div class="drop" id="drop">Arrastra y suelta archivos aqu√≠‚Ä¶</div>
      </div>
      <div class="previews" id="previews"></div>

      <textarea id="prompt" placeholder="Escribe tu mensaje‚Ä¶" maxlength="4000"></textarea>
      <div class="row">
        <div>
          <button class="btn" id="cleanChat" title="Borra historial y memoria de esta conversaci√≥n">Limpiar chat</button>
          <button class="btn warning" id="pingBtn" title="Probar conexi√≥n con el backend">Ping</button>
          <span class="hint" id="cidLabel"></span>
        </div>
        <button class="btn primary" id="sendBtn">Enviar</button>
      </div>
    </section>
  </div>

  <script>
    // ==== CONFIGURACI√ìN GLOBAL ====
    const API_BASE = window.location.origin; // Usar la misma URL del navegador
    const CONVO_KEY = 'arkaios_gemini_convo';
    
    // Generar ID de conversaci√≥n √∫nico
    let conversationId = localStorage.getItem(CONVO_KEY);
    if (!conversationId) {
      conversationId = (crypto.randomUUID && crypto.randomUUID()) || String(Date.now());
      localStorage.setItem(CONVO_KEY, conversationId);
    }

    // ==== ELEMENTOS DOM ====
    const historyDiv = document.getElementById('history');
    const input = document.getElementById('prompt');
    const fileInput = document.getElementById('fileInput');
    const previews = document.getElementById('previews');
    const sendBtn = document.getElementById('sendBtn');
    const clearBtn = document.getElementById('clearBtn');
    const pingBtn = document.getElementById('pingBtn');
    const rootToggle = document.getElementById('rootToggle');
    const cidLabel = document.getElementById('cidLabel');
    const statusEl = document.getElementById('connectionStatus');
    const drop = document.getElementById('drop');

    cidLabel.textContent = `CID: ${conversationId.slice(0,8)}‚Ä¶`;

    let pendingFiles = [];
    let isConnected = false;

    // ==== FUNCIONES UTILIDAD ====
    function updateConnectionStatus(connected) {
      isConnected = connected;
      if (connected) {
        statusEl.textContent = 'Conectado';
        statusEl.className = 'status online';
      } else {
        statusEl.textContent = 'Desconectado';
        statusEl.className = 'status offline';
      }
    }

    function setConnecting() {
      statusEl.textContent = 'Conectando...';
      statusEl.className = 'status connecting';
    }

    function addMessage({text, who='ai', attachments=[], isSystem=false}){
      const wrap = document.createElement('div');
      let className = `msg ${who}`;
      if (isSystem) className += ' system';
      else if (who==='ai' && rootToggle.checked) className += ' root';
      wrap.className = className;
      
      const head = document.createElement('div');
      head.className = 'head';
      if (isSystem) {
        head.textContent = 'Sistema';
      } else {
        head.textContent = who==='user' ? 'T√∫' : (rootToggle.checked ? 'Arkaios (ROOT/Gemini)' : 'Arkaios (Gemini)');
      }
      
      const body = document.createElement('div');
      body.className = 'content';
      body.textContent = text;
      
      wrap.appendChild(head);
      wrap.appendChild(body);

      if (attachments?.length){
        const att = document.createElement('div'); 
        att.className='attachments';
        attachments.forEach(a=>{
          const box=document.createElement('div'); 
          box.className='thumb';
          if(a.type?.startsWith('image/')){
            const img=new Image(); 
            img.src=a.preview||a.url; 
            img.alt=a.name; 
            img.onerror = () => img.src = 'data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><text y="50%" x="50%" text-anchor="middle" dy=".3em">‚ùå</text></svg>';
            box.appendChild(img);
          } else {
            const s=document.createElement('span'); 
            s.textContent='üìÑ '+(a.name||a.url); 
            box.appendChild(s);
          }
          att.appendChild(box);
        });
        wrap.appendChild(att);
      }

      historyDiv.appendChild(wrap);
      historyDiv.scrollTop = historyDiv.scrollHeight;
      return wrap;
    }

    function renderPreviews(){
      previews.innerHTML = '';
      pendingFiles.forEach((f, index)=>{
        const box=document.createElement('div'); 
        box.className='thumb';
        box.style.position = 'relative';
        
        // Bot√≥n eliminar
        const removeBtn = document.createElement('button');
        removeBtn.textContent = '√ó';
        removeBtn.style.cssText = 'position:absolute;top:-8px;right:-8px;width:20px;height:20px;border-radius:50%;background:var(--danger);color:white;border:none;cursor:pointer;font-size:12px;line-height:1';
        removeBtn.onclick = (e) => {
          e.stopPropagation();
          pendingFiles.splice(index, 1);
          renderPreviews();
        };
        
        if(f.type.startsWith('image/')){
          const img=new Image(); 
          img.alt=f.name; 
          img.style.maxWidth = '100px';
          img.style.maxHeight = '100px';
          box.appendChild(img);
          const rd=new FileReader(); 
          rd.onload=e=>{img.src=e.target.result}; 
          rd.readAsDataURL(f);
        } else { 
          const span = document.createElement('span');
          span.textContent='üìÑ '+f.name;
          span.style.display = 'block';
          span.style.maxWidth = '120px';
          span.style.overflow = 'hidden';
          span.style.textOverflow = 'ellipsis';
          span.style.whiteSpace = 'nowrap';
          box.appendChild(span);
        }
        
        box.appendChild(removeBtn);
        previews.appendChild(box);
      });
    }

    // ==== MANEJO DE ARCHIVOS ====
    fileInput.addEventListener('change', e=>{
      const newFiles = Array.from(e.target.files).filter(f => f.size <= 10*1024*1024);
      if (newFiles.length !== e.target.files.length) {
        addMessage({text: 'Algunos archivos fueron omitidos por ser muy grandes (m√°x 10MB)', who: 'ai', isSystem: true});
      }
      pendingFiles = [...pendingFiles, ...newFiles];
      renderPreviews();
      e.target.value = '';
    });
    
    clearBtn.addEventListener('click',()=>{ 
      pendingFiles=[]; 
      renderPreviews(); 
      fileInput.value=''; 
    });

    // ==== DRAG & DROP ====
    ['dragenter','dragover'].forEach(ev=>{
      drop.addEventListener(ev,e=>{
        e.preventDefault();
        drop.classList.add('dragover');
      });
      document.addEventListener(ev, e => e.preventDefault());
    });
    
    ['dragleave','drop'].forEach(ev=>{
      drop.addEventListener(ev,e=>{
        e.preventDefault();
        drop.classList.remove('dragover');
      });
    });
    
    drop.addEventListener('drop',e=>{ 
      const newFiles = Array.from(e.dataTransfer.files).filter(f => f.size <= 10*1024*1024);
      if (newFiles.length !== e.dataTransfer.files.length) {
        addMessage({text: 'Algunos archivos fueron omitidos por ser muy grandes (m√°x 10MB)', who: 'ai', isSystem: true});
      }
      pendingFiles = [...pendingFiles, ...newFiles]; 
      renderPreviews(); 
    });

    // ==== FUNCIONES DE COMUNICACI√ìN ====
    async function uploadFiles(){
      if(!pendingFiles.length) return [];
      
      const form=new FormData(); 
      pendingFiles.forEach(f=>form.append('files',f));
      
      const response = await fetch(`${API_BASE}/upload`, {
        method:'POST',
        body:form
      });
      
      if(!response.ok) {
        const errorText = await response.text();
        throw new Error(`Error al subir archivos: ${response.status} ${response.statusText} - ${errorText}`);
      }
      
      const data = await response.json();
      return data.files || [];
    }

    async function send(){
      const text = input.value.trim();
      if(!text && pendingFiles.length===0) return;
      if(sendBtn.disabled) return;

      // Mostrar mensaje del usuario inmediatamente
      const localPreviews = [];
      for(const f of pendingFiles){
        if(f.type.startsWith('image/')){
          try {
            const p = await new Promise((res, rej) => {
              const rd=new FileReader(); 
              rd.onload=e=>res(e.target.result);
              rd.onerror=rej;
              rd.readAsDataURL(f);
            });
            localPreviews.push({name:f.name, preview:p, type:f.type});
          } catch (e) {
            localPreviews.push({name:f.name, type:f.type});
          }
        } else { 
          localPreviews.push({name:f.name, type:f.type}); 
        }
      }
      
      if (text || localPreviews.length) {
        addMessage({text: text || '(adjuntos)', who:'user', attachments:localPreviews});
      }
      input.value='';

      // Deshabilitar bot√≥n y mostrar estado
      sendBtn.disabled=true;
      sendBtn.textContent = 'Enviando...';
      sendBtn.classList.add('loading');
      
      try{
        const uploaded = await uploadFiles();
        const payload = {
          message: text,
          attachments: uploaded,
          root: !!rootToggle.checked,
          conversationId
        };
        
        const response = await fetch(`${API_BASE}/chat`, {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body:JSON.stringify(payload)
        });
        
        if (!response.ok) {
          let errorMsg;
          try {
            const errorData = await response.json();
            errorMsg = errorData.respuesta || `Error ${response.status}: ${response.statusText}`;
          } catch {
            errorMsg = `Error ${response.status}: ${response.statusText}`;
          }
          throw new Error(errorMsg);
        }
        
        const data = await response.json();
        updateConnectionStatus(true);
        addMessage({text:data.respuesta||'(sin respuesta)', who:'ai', attachments:uploaded});
        
      } catch(err){
        console.error('Error en send():', err);
        updateConnectionStatus(false);
        addMessage({text:'‚ùå Error: '+err.message, who:'ai', isSystem: true});
      } finally {
        sendBtn.disabled=false;
        sendBtn.textContent = 'Enviar';
        sendBtn.classList.remove('loading');
        pendingFiles=[]; 
        renderPreviews(); 
        fileInput.value='';
      }
    }

    // ==== EVENT LISTENERS ====
    sendBtn.addEventListener('click', send);
    input.addEventListener('keydown',e=>{ 
      if(e.key==='Enter' && !e.shiftKey){ 
        e.preventDefault(); 
        send(); 
      }
    });

    // Limpiar chat
    document.getElementById('cleanChat').addEventListener('click', async ()=>{
      if(!confirm('¬øEst√°s seguro de que quieres borrar todo el historial y la memoria?')) return;
      
      try{
        await fetch(`${API_BASE}/clear`, {
          method:'POST',
          headers:{'Content-Type':'application/json'},
          body: JSON.stringify({ conversationId })
        });
      }catch(e){
        console.warn('Error limpiando memoria:', e);
      }
      
      historyDiv.innerHTML='';
      addMessage({text:'Memoria e historial de esta conversaci√≥n borrados.', who:'ai', isSystem: true});
      addInitialMessage();
    });

    // Ping
    pingBtn.addEventListener('click', async()=>{
      pingBtn.disabled = true;
      pingBtn.textContent = 'Probando...';
      setConnecting();
      
      try{
        const response = await fetch(`${API_BASE}/health`, {
          method: 'GET',
          cache: 'no-cache'
        }); 
        
        if (response.ok) {
          const data = await response.json();
          updateConnectionStatus(true);
          
          const statusMsg = `‚úÖ Servidor OK\n- Estado: ${data.status}\n- Modelo: ${data.model}\n- API configurada: ${data.api_key_configured ? 'S√≠' : 'No'}\n- Archivo HTML: ${data.html_file_exists ? 'Encontrado' : 'Faltante'}\n- Directorio: ${data.current_directory}`;
          addMessage({text:statusMsg, who:'ai', isSystem: true});
        } else {
          updateConnectionStatus(false);
          addMessage({text:'‚ùå Servidor respondi√≥ con error: '+response.status, who:'ai', isSystem: true});
        }
      }catch(e){
        updateConnectionStatus(false);
        addMessage({text:'‚ùå No se pudo conectar al servidor: '+e.message, who:'ai', isSystem: true});
      } finally {
        pingBtn.disabled = false;
        pingBtn.textContent = 'Ping';
      }
    });

    // Contador de caracteres
    input.addEventListener('input', () => {
      const remaining = 4000 - input.value.length;
      if (remaining < 100) {
        input.style.borderColor = remaining < 0 ? 'var(--danger)' : 'var(--accent)';
      } else {
        input.style.borderColor = 'var(--line)';
      }
    });

    // ==== INICIALIZACI√ìN ====
    function addInitialMessage() {
      addMessage({text:'¬°Hola! Soy Arkaios (Gemini). Puedes adjuntar im√°genes o PDFs para que los tenga en cuenta. Activa ¬´Modo ROOT¬ª si necesitas una acci√≥n administrativa.', who:'ai'});
    }

    async function checkInitialConnection() {
      setConnecting();
      try {
        const response = await fetch(`${API_BASE}/health`, {
          method: 'GET',
          cache: 'no-cache'
        });
        updateConnectionStatus(response.ok);
      } catch (e) {
        console.warn('Conexi√≥n inicial fall√≥:', e);
        updateConnectionStatus(false);
      }
    }

    // Inicializar cuando la p√°gina carga
    window.addEventListener('load', () => {
      checkInitialConnection();
      addInitialMessage();
    });

    // Opcional: verificar conexi√≥n peri√≥dicamente
    setInterval(async () => {
      if (!isConnected) {
        try {
          const response = await fetch(`${API_BASE}/health`, {
            method: 'GET',
            cache: 'no-cache'
          });
          if (response.ok) {
            updateConnectionStatus(true);
          }
        } catch (e) {
          // Silencioso - ya sabemos que no est√° conectado
        }
      }
    }, 10000); // Cada 10 segundos
  </script>
</body>
</html>
--- END CONTENT ---
