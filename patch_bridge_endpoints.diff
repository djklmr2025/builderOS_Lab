diff --git a/arkaios_gateway/server/bridge.js b/arkaios_gateway/server/bridge.js
new file mode 100644
index 0000000..a1b2c3d
--- /dev/null
+++ b/arkaios_gateway/server/bridge.js
@@
+// ARKAIOS Bridge router: handshake + enqueue + pull + JSONL logs
+const express = require('express');
+const fs = require('fs');
+const path = require('path');
+const crypto = require('crypto');
+
+const router = express.Router();
+
+// Carga claves públicas permitidas (SPKI Base64 por entidad)
+let KEYS = {};
+try {
+  KEYS = require('./bridge_keys.json');
+} catch (e) {
+  // Si no existe, intenta .example
+  try {
+    KEYS = require('./bridge_keys.json.example');
+  } catch (e2) {
+    KEYS = {};
+  }
+}
+
+// Logs JSONL en repo/logs/bridge.jsonl
+const LOG_PATH = path.resolve(__dirname, '../../logs/bridge.jsonl');
+fs.mkdirSync(path.dirname(LOG_PATH), { recursive: true });
+function logLine(obj) {
+  const rec = { ts: new Date().toISOString(), ...obj };
+  fs.appendFile(LOG_PATH, JSON.stringify(rec) + '\n', () => {});
+}
+
+// Sesiones en memoria (Render free: efímero, suficiente para POC)
+const sessions = new Map();
+const TTL_MS = 15 * 60 * 1000; // 15 min
+
+// Auth: si OPEN_MODE=1, acceso abierto; si no, exige Bearer MASTER_TOKEN
+function requireAuth(req, res, next) {
+  if (process.env.OPEN_MODE === '1') return next();
+  const hdr = req.headers['authorization'] || '';
+  const tok = hdr.startsWith('Bearer ') ? hdr.slice(7) : '';
+  if (tok && tok === process.env.MASTER_TOKEN) return next();
+  return res.status(401).json({ ok: false, error: 'unauthorized' });
+}
+
+// Handshake: valida entidad y clave pública declarada
+// body: { entity, client_pub }
+router.post('/handshake', (req, res) => {
+  const { entity, client_pub } = req.body || {};
+  if (!entity || !client_pub) {
+    return res.status(400).json({ ok: false, error: 'missing_fields' });
+  }
+  const allowed = KEYS[entity];
+  if (!allowed) return res.status(403).json({ ok: false, error: 'unknown_entity' });
+  if (allowed !== client_pub) {
+    return res.status(401).json({ ok: false, error: 'public_key_mismatch' });
+  }
+  const session = crypto.randomUUID();
+  const server_pub = crypto.randomBytes(32).toString('base64'); // placeholder (señal)
+  const started = Date.now();
+  sessions.set(session, { entity, server_pub, started, msgs: [] });
+  logLine({ type: 'handshake', entity, session });
+  return res.json({ ok: true, session, server_pub, ttl_ms: TTL_MS });
+});
+
+// Encola mensajes: requiere auth salvo OPEN_MODE=1
+// query: ?session=... ; body: { from, to, payload }
+router.post('/enqueue', requireAuth, (req, res) => {
+  const { session } = req.query;
+  const s = sessions.get(session);
+  if (!s) return res.status(404).json({ ok: false, error: 'no_session' });
+  const { from, to, payload } = req.body || {};
+  if (!from || !to) return res.status(400).json({ ok: false, error: 'missing_fields' });
+  const msg = { id: crypto.randomUUID(), from, to, payload: payload ?? null, t: Date.now() };
+  s.msgs.push(msg);
+  logLine({ type: 'enqueue', session, from, to, msg_id: msg.id });
+  return res.json({ ok: true, queued: 1, id: msg.id });
+});
+
+// Pull: obtiene mensajes desde un timestamp
+// query: ?session=...&since=...
+router.get('/pull', requireAuth, (req, res) => {
+  const { session } = req.query;
+  const since = Number(req.query.since || 0);
+  const s = sessions.get(session);
+  if (!s) return res.status(404).json({ ok: false, error: 'no_session' });
+  const batch = s.msgs.filter(m => m.t > since);
+  logLine({ type: 'pull', session, since, count: batch.length });
+  return res.json({ ok: true, count: batch.length, messages: batch, now: Date.now() });
+});
+
+// Limpieza básica de sesiones expiradas
+setInterval(() => {
+  const now = Date.now();
+  for (const [sid, s] of sessions) {
+    if (now - s.started > TTL_MS) {
+      sessions.delete(sid);
+      logLine({ type: 'session_expired', session: sid });
+    }
+  }
+}, 60_000);
+
+module.exports = router;
diff --git a/arkaios_gateway/server/gateway.js b/arkaios_gateway/server/gateway.js
index 1111111..2222222 100644
--- a/arkaios_gateway/server/gateway.js
+++ b/arkaios_gateway/server/gateway.js
@@
 // ... (tu código existente del gateway)
 
+// ---- ARKAIOS Bridge endpoints ----
+try {
+  const bridge = require('./bridge');
+  app.use('/bridge', bridge);
+  console.log('[bridge] endpoints activos en /bridge/*');
+} catch (e) {
+  console.error('[bridge] no se pudo cargar:', e.message);
+}
+
 // listen
 app.listen(process.env.PORT || 8080, '0.0.0.0', () =>
   console.log('ARKAIOS Gateway on :' + (process.env.PORT || 8080))
 );
diff --git a/arkaios_gateway/server/bridge_keys.json.example b/arkaios_gateway/server/bridge_keys.json.example
new file mode 100644
index 0000000..cafe123
--- /dev/null
+++ b/arkaios_gateway/server/bridge_keys.json.example
@@
 {
   "//": "Claves PÚBLICAS SPKI Base64 (X25519) por entidad. Sustituye por las reales.",
   "ARKAIOS": "BASE64_SPKI_X25519_PUBLIC_KEY",
   "Puter":   "BASE64_SPKI_X25519_PUBLIC_KEY",
   "Copilot": "BASE64_SPKI_X25519_PUBLIC_KEY",
   "Gemini":  "BASE64_SPKI_X25519_PUBLIC_KEY"
 }
diff --git a/.gitignore b/.gitignore
index 3333333..4444444 100644
--- a/.gitignore
+++ b/.gitignore
@@
+# --- ARKAIOS Bridge ---
+logs/*.jsonl
+logs/*.log
+arkaios_gateway/server/bridge_keys.json
